<?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
                "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
    <!--generatorConfiguration标签包含三个子标签，properties，classPathEntry，context注意三个子标签的顺序不能更改。-->

    <!--properties用于指定外部属性元素，最多可以配置1个
    properties标签包含resource和url两个属性，只能使用其中一个来指定properties文件。
    然后可以在配置文件中通过${property}引用。-->

    <!--<properties resource="classpath:xxx.properties"/>-->

    <!--常见用法通过location属性指定驱动的路径。&ndash;&gt;-->

    <!--<classPathEntry location="E:\xxx.jar"/>-->

    <!--context标签，重要！至少配置一个，也可配置多个
    context标签用于指定生成一组对象环境，数据库、生成的类型和数据库中的表等。-->
    <classPathEntry location="C:\Users\Administrator\.m2\repository\org\mybatis\generator\mybatis-generator-core\1.3.7\mybatis-generator-core-1.3.7.jar"/>
    <context id="blogContext" defaultModelType="flat" targetRuntime="MyBatis3">

        <commentGenerator>
            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>

        <!--数据库连接的信息：驱动类、连接地址、用户名、密码 -->
        <jdbcConnection driverClass="com.mysql.cj.jdbc.Driver"
                        connectionURL="jdbc:mysql://localhost:3306/db_blog?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC"
                        userId="root" password="">
            <!--以下这两行property可以解决生成mapper时，Generator无法识别主键的问题-->
            <property name="useInformationSchema" value="true"/>
            <property name="remarks" value="true"/>
        </jdbcConnection>

        <!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和
            NUMERIC 类型解析为java.math.BigDecimal -->

        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/></javaTypeResolver>

        <!-- targetProject:生成PO类的位置 -->
        <javaModelGenerator targetPackage="com.gtmdtest.platform.model.entity" targetProject="D:\projects\GTMDTest\src\main\java">
            <!-- enableSubPackages:是否让schema作为包的后缀 -->
            <property name="enableSubPackages" value="false"/>
            <!-- 从数据库返回的值被清理前后的空格 -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>

        <!-- targetProject:mapper映射文件生成的位置 -->
        <sqlMapGenerator targetPackage="mapper" targetProject="D:\projects\GTMDTest\src\main\java">
            <!-- enableSubPackages:是否让schema作为包的后缀 -->
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <!-- targetPackage：mapper接口生成的位置 -->
        <javaClientGenerator type="XMLMAPPER"
                             targetPackage="com.gtmdtest.platform.model.mapper" targetProject="D:\projects\GTMDTest\src\main\java">
            <!-- enableSubPackages:是否让schema作为包的后缀 -->
            <property name="enableSubPackages" value="false"/>
        </javaClientGenerator>

        <!-- 指定数据库表 -->
        <table schema="db_platform" tableName="case">
            <generatedKey column="id" sqlStatement="mysql"/>
            <!--如果没有这两行，mbg会生成BLOBS对象来映射数据库中的较大字段-->
            <columnOverride column="system_name" javaType="java.lang.String" jdbcType="VARCHAR" />
            <columnOverride column="case_name" javaType="java.lang.String" jdbcType="VARCHAR" />
            <columnOverride column="description" javaType="java.lang.String" jdbcType="VARCHAR" />
            <columnOverride column="run_url" javaType="java.lang.String" jdbcType="VARCHAR" />
        </table>
        <table schema="db_platform" tableName="star_case">
            <generatedKey column="id" sqlStatement="mysql"/>
            <!--如果没有这两行，mbg会生成BLOBS对象来映射数据库中的较大字段-->
            <columnOverride column="case_name" javaType="java.lang.String" jdbcType="VARCHAR" />
        </table>
        <table schema="db_platform" tableName="users">
            <generatedKey column="id" sqlStatement="mysql"/>
            <!--如果没有这两行，mbg会生成BLOBS对象来映射数据库中的较大字段-->
            <columnOverride column="username" javaType="java.lang.String" jdbcType="VARCHAR" />
            <columnOverride column="password" javaType="java.lang.String" jdbcType="VARCHAR" />
        </table>
    </context>
</generatorConfiguration>